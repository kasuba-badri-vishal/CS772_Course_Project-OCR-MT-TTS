Parameters of the Algorithm The use of Jaccard index to assess similarity between addresses in our algorithm is optional. Our implicit assumption is that there exists a function d which assesses the similarity between two addresses x and y. Blocking can reduce the number of evaluations of d without missing links, if d > T indicating I and y share a function is token. In our two-round linkage, our implicit One may design any other implicit function instead, replacing the Jaccard The Jaccard index in round 2 of the comparison can also be replaced by almost any other similarity function, for example the Monge-Elkan function , index with any other measurement. which is suitable for addresses. 9 Conclusion We have presented in this paper a novel address-linkage algorithm that: 3. extends the inverted index data structure to facilitate large-scale address 1. links addresses as free text; 2. uses data-driven blocking keys; linking; 4. is robust against data-quality issues; and 5. is practical and scalable. The simplicity of the solution a great virtue in large-scale industrial applications may belie the slightly tortuous journey leading to its discovery; a Journey laden with the corpses of a wide-range of seemingly good ideas like compressive sensing and other matrix factorisation and dhnssboally-nelucios techniques, nearest-netghbour algorithms like KD-trees, ElasticSearch with custom rescoring functions , rules-based expert systems, and implementation languages that range from low-level C, to R, Python, SQL and more. In retrospect, our algorithm can be interpreted as an application of a signature-Dased approach to efficiently compute set-similarity joins , where the abstract concept of sets is replaced with carefully considered set-reprecentations of addresses, with a modern twist in its implementation on state-of-the-art parallel databases to lift the algorithm's scalability to potentially petabyte-sized datasets. References 1. Arasu, A., Ganti, V., Kaushik, R.: Efficient exact set-similarity joins. In: Proceedings of the 32nd International Conference on Very Large Data Bases. pp. 918 929. VLDB Endowment 